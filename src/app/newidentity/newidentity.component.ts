import { Key } from './../vault/key';
import { async } from '@angular/core/testing';
import { VaultService } from './../vault/vault.service';
import { Web3Service } from './../web3.service';
import { Component, OnInit } from '@angular/core';
import { Router } from '@angular/router';

@Component({
  selector: 'app-newidentity',
  templateUrl: './newidentity.component.html',
  styleUrls: ['./newidentity.component.css']
})
export class NewidentityComponent implements OnInit {
  keys: Key[] = new Array<Key>();
  name = '';
  managementkey = '';

  constructor(
    public web3Service: Web3Service,
    private vault: VaultService,
    private router: Router
  ) { }

  ngOnInit() {
    this.keys = this.vault.getKeys();
  }

  async save() {
    const keyAccount = this.web3Service.web3.eth.accounts.privateKeyToAccount(this.managementkey);
    const newAccount = this.web3Service.web3.eth.accounts.create();
    const identityAddress = await this.deployIdentityContract(keyAccount);
    this.vault.addIdentity(this.name, identityAddress, newAccount.privateKey);
    this.router.navigate(['/identities']);
  }

  private async deployIdentityContract(senderAccount) {

    const IdentityContract = new this.web3Service.web3.eth.Contract(
      [{'constant':true,'inputs':[{'name':'_key','type':'bytes32'},{'name':'_purpose','type':'uint256'}],'name':'getKey','outputs':[{'name':'purpose','type':'uint256'},{'name':'keyType','type':'uint256'},{'name':'key','type':'bytes32'}],'payable':false,'stateMutability':'view','type':'function'},{'constant':false,'inputs':[{'name':'_key','type':'bytes32'},{'name':'_purpose','type':'uint256'},{'name':'_keyType','type':'uint256'}],'name':'addKey','outputs':[{'name':'success','type':'bool'}],'payable':false,'stateMutability':'nonpayable','type':'function'},{'constant':false,'inputs':[{'name':'_key','type':'bytes32'},{'name':'_purpose','type':'uint256'}],'name':'removeKey','outputs':[{'name':'success','type':'bool'}],'payable':false,'stateMutability':'nonpayable','type':'function'},{'constant':true,'inputs':[{'name':'_purpose','type':'uint256'}],'name':'getKeysByPurpose','outputs':[{'name':'keys','type':'bytes32[]'}],'payable':false,'stateMutability':'view','type':'function'},{'constant':true,'inputs':[{'name':'_key','type':'bytes32'}],'name':'getKeyPurposes','outputs':[{'name':'purpose','type':'uint256[]'}],'payable':false,'stateMutability':'view','type':'function'},{'inputs':[],'payable':false,'stateMutability':'nonpayable','type':'constructor'},{'anonymous':false,'inputs':[{'indexed':true,'name':'key','type':'bytes32'},{'indexed':true,'name':'purpose','type':'uint256'},{'indexed':true,'name':'keyType','type':'uint256'}],'name':'KeyAdded','type':'event'},{'anonymous':false,'inputs':[{'indexed':true,'name':'key','type':'bytes32'},{'indexed':true,'name':'purpose','type':'uint256'},{'indexed':true,'name':'keyType','type':'uint256'}],'name':'KeyRemoved','type':'event'},{'anonymous':false,'inputs':[{'indexed':true,'name':'executionId','type':'uint256'},{'indexed':true,'name':'to','type':'address'},{'indexed':true,'name':'value','type':'uint256'},{'indexed':false,'name':'data','type':'bytes'}],'name':'ExecutionRequested','type':'event'},{'anonymous':false,'inputs':[{'indexed':true,'name':'executionId','type':'uint256'},{'indexed':true,'name':'to','type':'address'},{'indexed':true,'name':'value','type':'uint256'},{'indexed':false,'name':'data','type':'bytes'}],'name':'Executed','type':'event'},{'anonymous':false,'inputs':[{'indexed':true,'name':'executionId','type':'uint256'},{'indexed':false,'name':'approved','type':'bool'}],'name':'Approved','type':'event'}],
      null,
      null
    );

  const deploy = IdentityContract.deploy(
    {data: '0x6060604052341561000f57600080fd5b600033604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c010000000000000000000000000281526014019150506040518091039020905080600080836000191660001916815260200190815260200160002060010181600019169055506001600080836000191660001916815260200190815260200160002060000181905550600080826000191660001916815260200190815260200160002060020180548060010182816100dc9190610139565b91600052602060002090016000600190919091505550600160006001815260200190815260200160002080548060010182816101189190610165565b916000526020600020900160008390919091509060001916905550506101db565b8154818355818115116101605781836000526020600020918201910161015f9190610191565b5b505050565b81548183558181151161018c5781836000526020600020918201910161018b91906101b6565b5b505050565b6101b391905b808211156101af576000816000905550600101610197565b5090565b90565b6101d891905b808211156101d45760008160009055506001016101bc565b5090565b90565b610912806101ea6000396000f30060606040526004361061006d576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806313fb4b8f146100725780631d381240146100cc57806353d413c51461011d5780639010f72614610165578063fb307b34146101dd575b600080fd5b341561007d57600080fd5b6100a0600480803560001916906020019091908035906020019091905050610259565b604051808481526020018381526020018260001916600019168152602001935050505060405180910390f35b34156100d757600080fd5b6101036004808035600019169060200190919080359060200190919080359060200190919050506102e2565b604051808215151515815260200191505060405180910390f35b341561012857600080fd5b61014b6004808035600019169060200190919080359060200190919050506104b4565b604051808215151515815260200191505060405180910390f35b341561017057600080fd5b610186600480803590602001909190505061072c565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156101c95780820151818401526020810190506101ae565b505050509050019250505060405180910390f35b34156101e857600080fd5b6102026004808035600019169060200190919050506107a1565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561024557808201518184015260208101905061022a565b505050509050019250505060405180910390f35b600080600080600080600088600019166000191681526020019081526020016000209150600090505b81600201805490508110156102d85781600201818154811015156102a257fe5b9060005260206000209001548614156102cb5785826000015483600101549450945094506102d9565b8080600101915050610282565b5b50509250925092565b600080600033604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140191505060405180910390209150600090505b6001600060018152602001908152602001600020805490508110156104ab5760016000600181526020019081526020016000208181548110151561037f57fe5b906000526020600020900154600019168260001916141561049e5785600080886000191660001916815260200190815260200160002060010181600019169055508360008088600019166000191681526020019081526020016000206000018190555060008087600019166000191681526020019081526020016000206002018054806001018281610411919061081c565b91600052602060002090016000879091909150555060016000868152602001908152602001600020805480600101828161044b9190610848565b916000526020600020900160008890919091509060001916905550838587600019167f480000bb1edad8ca1470381cc334b1917fbd51c6531f3a623ea8e0ec7e38a6e960405160405180910390a4600192505b808060010191505061033f565b50509392505050565b60008060008033604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140191505060405180910390209150600090505b6001600060018152602001908152602001600020805490508110156107235760016000600181526020019081526020016000208181548110151561055257fe5b906000526020600020900154600019168260001916141561071657600092505b60016000868152602001908152602001600020805490508310156105dd5760016000868152602001908152602001600020838154811015156105b057fe5b90600052602060002090015460001916866000191614156105d0576105dd565b8280600101935050610572565b60016000868152602001908152602001600020838154811015156105fd57fe5b906000526020600020900160009055600092505b6000808760001916600019168152602001908152602001600020600201805490508310156106885760008087600019166000191681526020019081526020016000206002018381548110151561066357fe5b90600052602060002090015485141561067b57610688565b8280600101935050610611565b6000808760001916600019168152602001908152602001600020600201838154811015156106b257fe5b9060005260206000209001600090556000808760001916600019168152602001908152602001600020600001548587600019167f585a4aef50f8267a92b32412b331b20f7f8b96f2245b253b9cc50dcc621d339760405160405180910390a4600193505b8080600101915050610512565b50505092915050565b610734610874565b6001600083815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561079557602002820191906000526020600020905b8154600019168152602001906001019080831161077d575b50505050509050919050565b6107a9610888565b600080836000191660001916815260200190815260200160002060020180548060200260200160405190810160405280929190818152602001828054801561081057602002820191906000526020600020905b8154815260200190600101908083116107fc575b50505050509050919050565b81548183558181151161084357818360005260206000209182019101610842919061089c565b5b505050565b81548183558181151161086f5781836000526020600020918201910161086e91906108c1565b5b505050565b602060405190810160405280600081525090565b602060405190810160405280600081525090565b6108be91905b808211156108ba5760008160009055506001016108a2565b5090565b90565b6108e391905b808211156108df5760008160009055506001016108c7565b5090565b905600a165627a7a72305820a59f9d4f99d5aa464e9081e506183104ecf0cd17ef6dfb2bad4f3a610a3a50130029'}
  );

  const trx = {
    nonce: this.vault.getNonce(),
    chainId: 4385,
    gas: 2000000,
    data: deploy._deployData
  };

  const contractAddress = await this.web3Service.web3.eth.accounts.signTransaction(trx, senderAccount.privateKey)
  .then((sgnTrx) => {
    return this.web3Service.web3.eth.sendSignedTransaction(sgnTrx.rawTransaction);
  }).then((receipt) => {
    return receipt.contractAddress;
  }).catch((error) => {
    throw new Error(error);
  });

  return contractAddress;
  }

}
